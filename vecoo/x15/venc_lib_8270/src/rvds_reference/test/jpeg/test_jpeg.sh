#!/bin/bash

#Imports

.  ./f_run.sh

# import commonconfig
if [ ! -e masterscripts/commonconfig.sh ]
then
    echo "<commonconfig.sh> missing"
    exit 1
else
.  ./masterscripts/commonconfig.sh
fi

/sbin/rmmod memalloc
./memalloc_load.sh alloc_method=1


# This script runs a single test case or all test cases
# The tests can be run with ARM simulator or executable binary
# For simulator, the input is ASIC reference data generated by system model

# SET THIS
# Choose whether to run test in ARM simulator (1) or linux executable (0)
simulator=0

# SET THIS
# Choose whether to run all test like defined in parameter.sh (0) or all cases run in "whole frame" mode (1).
encodeType=0

# Encoder bin
if [ $simulator == 1 ]; then
    enc_file=testenc.axf
    enc_bin="armsd -cpu ARM926EJ-S -clock 266M -script armscript.txt $enc_file"
    if [ ! -e $enc_file ]; then
        echo "ARM image $enc_file not found. Compile with 'make pclinuxarm'"
        exit
    fi
else
    enc_bin=./jpeg_testenc
    if [ ! -e $enc_bin ]; then
        echo "Executable $enc_bin not found. Compile with 'make'"
        exit
    fi
fi

nice_bin=""

# Test case parameter definitions
if [ ! -e $test_case_list_dir/test_data_parameter_jpeg.sh ]; then
    echo "$test_case_list_dir/test_data_parameter_jpeg.sh not found"
    exit -1
fi

# Output file when running all cases
# .log and .txt are created
resultfile=results_jpeg

# Current date
#date=`date +"%d.%m.%y %k:%M"`

# Check parameter
if [ $# -eq 0 ]; then
    echo "Usage: test_jpeg.sh <test_case_number>"
    echo "   or: test_jpeg.sh <all>"
    echo "   or: test_jpeg.sh <first_case> <last_case>"
    exit
fi

# Encode command
. $test_case_list_dir/encode_jpeg.sh

encode_whole_mode() {
        codingtype=( 0 0 0 0 0 )
        encode
}


compare() {
    if cmp output/$case_dir.jpg $case_dir/stream.jpg; then
        echo "Case $case_nro OK"
        echo "E case_$case_nro;SW/HW Integration;;$date;OK;;$hwtag;$USER;;;$swtag;$systag"
    else
        echo "Case $case_nro FAILED"
        echo "E case_$case_nro;SW/HW Integration;;$date;Failed;;$hwtag;$USER;;;$swtag;$systag"
    fi
}

test_set() {
    # Test data dir
    let "set_nro=${case_nro}-${case_nro}/5*5"
    case_dir=$test_data_home/case_$case_nro

    # Do nothing if test case is not valid
    if [ ${valid[${set_nro}]} -eq -1 ]; then
        echo "case_$case_nro is not valid."
    else
        # Do nothing if test data doesn't exists
        #if [ ! -e $case_dir ]; then
        #    echo "Directory $case_dir doesn't exist!"
        #    echo "You must generate test data first using system model."
        #else
            # Invoke new shell
            (
            echo "========================================================="
            echo "Run case $case_nro"

	    if [ ! -e $TESTDIR/case_${case_nro} ]
	    then
	        mkdir $TESTDIR/case_${case_nro}
		chmod 777 $TESTDIR/case_${case_nro}
	    fi

            rm -f mb_control.bin rlc.bin mb_controlTn.bin rlcTn.bin stream.jpg

            #echo "Input from directory $case_dir"

            # Links to reference ASIC output data
            #ln -s $case_dir/mb_control.bin .
            #ln -s $case_dir/rlc.bin .
	        #ln -s $case_dir/mb_controlTn.bin .
            #ln -s $case_dir/rlcTn.bin .

            # Run encoder
            if [ $encodeType -eq 0 ];
            then
                startTimeCounter "$case_nro"
                encode > encoder_jpeg.log
                endTimeCounter "$case_nro"
            else
                echo "NOTE! ALL CASES IN WHOLE FRAME MODE"

                startTimeCounter "$case_nro"
                encode_whole_mode > encoder_jpeg.log
                endTimeCounter "$case_nro"
            fi

            cat encoder_jpeg.log

            # Get encoder tag
            #swtag=`grep "sw627" encoder_jpeg.log  | awk '{print $2}'`
            #hwtag=`grep "0x627" encoder_jpeg.log  | awk '{print $3}'`
            #systag=`cat $case_dir/taginfo`

            if [ $simulator == 1 ]; then
                cp encoder_jpeg.log sim_case_$case_nro.log
                cp tmp.prf sim_case_$case_nro.prf
            fi

            # Make script run.sh for this testcase
            nice_bin="echo"
            encode > run_jpeg.sh
            echo "cmp stream.jpg $case_dir/stream.jpg" >> run_jpeg.sh

            echo "case_${case_nro} DONE"

            if [ -e random_run ]
            then
                mv stream.jpg ${TESTDIR}/case_${case_nro}/case_${case_nro}.jpg
                #mv case_${case_nro}.time ${TESTDIR}/case_${case_nro}.time
            else
                mv stream.jpg case_${case_nro}/case_$case_nro.jpg
                cp encoder_jpeg.log case_${case_nro}/case_$case_nro.log
            fi

            if ( [ "$TRACE_SW_REGISTER" == "y" ] )
            then
                mv -f sw_reg.trc $TESTDIR/case_${case_nro}/sw_reg.trc
            fi
            if ( [ "$TRACE_EWL" == "y" ] )
            then
                mv -f ewl.trc $TESTDIR/case_${case_nro}/ewl.trc
            fi

            touch ${TESTDIR}/case_${case_nro}/run_${case_nro}_done


            )
        #fi
    fi
}

run_cases() {
    
    echo "Running test cases $first_case..$last_case"
    echo "This will take several minutes"
    echo "Output is stored in $resultfile.log and $resultfile.txt"
    rm -f $resultfile.log $resultfile.txt
    for ((case_nro=$first_case; case_nro<=$last_case; case_nro++))
    do 
        echo -en "\rCase $case_nro "  
        . $test_case_list_dir/test_data_parameter_jpeg.sh "$case_nro"
        test_set >> $resultfile.log
	
    done
    echo -e "\nDone\n" 
    #grep "E case_" $resultfile.log > $resultfile.csv
    #grep "Case" $resultfile.log > $resultfile.txt
    #cat $resultfile.txt
}

run_case() {

    . $test_case_list_dir/test_data_parameter_jpeg.sh "$case_nro"
    test_set
}

# Encoder test set.
trigger=-1 # NO Logic analyzer trigger by default

case "$1" in
    all)
    first_case=2000
    last_case=2900
    run_cases;;

    *)
    if [ $# -eq 1 ]; then
        case_nro=$1
        run_case
    else
        first_case=$1
        last_case=$2
        run_cases
    fi;;
esac

